/**
 * Environment Setup Script for Pulse Robot Platform
 * Sets up development environment, creates test accounts, and configures contracts
 */

const { StacksTestnet } = require('@stacks/network');
const {
  makeSTXTokenTransfer,
  broadcastTransaction,
  AnchorMode,
  makeContractCall,
} = require('@stacks/transactions');
const { generateSecretKey, getAddressFromPrivateKey } = require('@stacks/wallet-sdk');
const fs = require('fs');
const path = require('path');

// Network configuration
const NETWORK = new StacksTestnet();

// Predefined test accounts for consistent testing
const TEST_ACCOUNTS = {
  deployer: {
    privateKey: process.env.STACKS_PRIVATE_KEY || generateSecretKey(),
    address: null, // Will be set after key generation
    role: 'Contract deployer and admin'
  },
  eventOrganizer1: {
    privateKey: generateSecretKey(),
    address: null,
    role: 'Event organizer for testing event creation'
  },
  eventOrganizer2: {
    privateKey: generateSecretKey(),
    address: null,
    role: 'Second event organizer for multi-organizer testing'
  },
  user1: {
    privateKey: generateSecretKey(),
    address: null,
    role: 'Regular user for ticket purchases'
  },
  user2: {
    privateKey: generateSecretKey(),
    address: null,
    role: 'Regular user for secondary market testing'
  },
  user3: {
    privateKey: generateSecretKey(),
    address: null,
    role: 'Regular user for governance testing'
  }
};

// Calculate addresses
for (const [name, account] of Object.entries(TEST_ACCOUNTS)) {
  account.address = getAddressFromPrivateKey(account.privateKey, 'testnet');
}

console.log('🔧 Pulse Robot Platform - Environment Setup');
console.log('===========================================\n');

// Function to request STX from faucet
const requestTestnetSTX = async (address) => {
  try {
    console.log(`💰 Requesting testnet STX for ${address}...`);

    const response = await fetch('https://api.testnet.hiro.so/extended/v1/faucets/stx', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        address: address,
        stacking: false
      })
    });

    if (response.ok) {
      const result = await response.json();
      console.log(`✅ Faucet request successful for ${address}`);
      return result;
    } else {
      console.log(`⚠️  Faucet request failed for ${address}: ${response.statusText}`);
      return null;
    }
  } catch (error) {
    console.log(`⚠️  Faucet request error for ${address}:`, error.message);
    return null;
  }
};

// Function to check account balance
const checkBalance = async (address) => {
  try {
    const response = await fetch(`${NETWORK.coreApiUrl}/extended/v1/address/${address}/balances`);
    const data = await response.json();
    return parseInt(data.stx.balance) / 1000000; // Convert from micro-STX
  } catch (error) {
    console.log(`Error checking balance for ${address}:`, error.message);
    return 0;
  }
};

// Function to create environment file
const createEnvFile = () => {
  const envContent = `# Pulse Robot Platform - Environment Configuration
# Generated by setup-environment.js

# Network Configuration
STACKS_NETWORK=testnet
STACKS_API_URL=https://api.testnet.hiro.so

# Contract Deployer Account
STACKS_PRIVATE_KEY=${TEST_ACCOUNTS.deployer.privateKey}
STACKS_ADDRESS=${TEST_ACCOUNTS.deployer.address}

# Turnkey Configuration (replace with your actual values)
VITE_TURNKEY_ORGANIZATION_ID=47df936a-6c65-497a-b879-2a37f7570b8a
VITE_TURNKEY_AUTH_PROXY_CONFIG_ID=44059b55-6a77-4398-8586-0fffc86e4b12

# Contract Addresses (will be updated after deployment)
VITE_NFT_TICKET_CONTRACT=${TEST_ACCOUNTS.deployer.address}.nft-ticket
VITE_PROOF_OF_FANDOM_CONTRACT=${TEST_ACCOUNTS.deployer.address}.proof-of-fandom
VITE_SBTC_PAYMENT_CONTRACT=${TEST_ACCOUNTS.deployer.address}.sbtc-payment
VITE_GOVERNANCE_CONTRACT=${TEST_ACCOUNTS.deployer.address}.governance

# sBTC Configuration (testnet)
VITE_SBTC_CONTRACT_ADDRESS=ST1PQHQKV0RJXZFY1DGX8MNSNYVE3VGZJSRTPGZGM
VITE_SBTC_CONTRACT_NAME=sbtc-token

# Test Accounts
TEST_EVENT_ORGANIZER_1_KEY=${TEST_ACCOUNTS.eventOrganizer1.privateKey}
TEST_EVENT_ORGANIZER_1_ADDRESS=${TEST_ACCOUNTS.eventOrganizer1.address}

TEST_EVENT_ORGANIZER_2_KEY=${TEST_ACCOUNTS.eventOrganizer2.privateKey}
TEST_EVENT_ORGANIZER_2_ADDRESS=${TEST_ACCOUNTS.eventOrganizer2.address}

TEST_USER_1_KEY=${TEST_ACCOUNTS.user1.privateKey}
TEST_USER_1_ADDRESS=${TEST_ACCOUNTS.user1.address}

TEST_USER_2_KEY=${TEST_ACCOUNTS.user2.privateKey}
TEST_USER_2_ADDRESS=${TEST_ACCOUNTS.user2.address}

TEST_USER_3_KEY=${TEST_ACCOUNTS.user3.privateKey}
TEST_USER_3_ADDRESS=${TEST_ACCOUNTS.user3.address}

# Frontend Configuration
VITE_APP_NAME=Pulse Robot NFT Ticketing
VITE_APP_DESCRIPTION=Decentralized NFT ticketing platform on Stacks
VITE_APP_URL=https://pulse-robot.com

# API Keys (add your actual keys)
# VITE_PINATA_API_KEY=your_pinata_api_key
# VITE_PINATA_SECRET_KEY=your_pinata_secret_key
`;

  fs.writeFileSync(path.join(__dirname, '..', '.env'), envContent);
  console.log('✅ Created .env file with test configuration');
};

// Function to create test data file
const createTestDataFile = () => {
  const testData = {
    accounts: TEST_ACCOUNTS,
    sampleEvents: [
      {
        name: 'Bitcoin Conference 2025',
        description: 'The premier Bitcoin conference featuring industry leaders and innovators',
        venue: 'Austin Convention Center, Austin, TX',
        category: 'conference',
        ticketPrice: 5000000, // 0.05 sBTC
        totalSupply: 1000,
        royaltyPercentage: 500 // 5%
      },
      {
        name: 'Stacks Builders Meetup',
        description: 'Monthly meetup for Stacks developers and builders',
        venue: 'Tech Hub, San Francisco, CA',
        category: 'meetup',
        ticketPrice: 1000000, // 0.01 sBTC
        totalSupply: 50,
        royaltyPercentage: 250 // 2.5%
      },
      {
        name: 'Web3 Music Festival',
        description: 'Decentralized music festival with NFT tickets and exclusive perks',
        venue: 'Crypto Valley, Miami, FL',
        category: 'festival',
        ticketPrice: 25000000, // 0.25 sBTC
        totalSupply: 2000,
        royaltyPercentage: 750 // 7.5%
      }
    ],
    badgeTypes: [
      {
        name: 'Event Attendee',
        description: 'Badge for attending events on the platform',
        category: 'attendance',
        maxTier: 5,
        isTransferable: false
      },
      {
        name: 'Community Champion',
        description: 'Badge for active community participation',
        category: 'community',
        maxTier: 3,
        isTransferable: true
      },
      {
        name: 'Early Adopter',
        description: 'Badge for early platform adopters',
        category: 'special',
        maxTier: 1,
        isTransferable: true
      }
    ]
  };

  fs.writeFileSync(
    path.join(__dirname, '..', 'test-data.json'),
    JSON.stringify(testData, null, 2)
  );
  console.log('✅ Created test-data.json with sample data');
};

// Function to create package.json scripts
const updatePackageScripts = () => {
  const packagePath = path.join(__dirname, '..', 'package.json');

  if (fs.existsSync(packagePath)) {
    const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));

    // Add deployment and testing scripts
    packageJson.scripts = {
      ...packageJson.scripts,
      'deploy:testnet': 'node scripts/deploy.js',
      'deploy:mainnet': 'STACKS_NETWORK=mainnet node scripts/deploy.js',
      'setup:env': 'node scripts/setup-environment.js',
      'test:contracts': 'clarinet test',
      'test:integration': 'node scripts/test-integration.js',
      'faucet': 'node scripts/request-faucet.js'
    };

    fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2));
    console.log('✅ Updated package.json with deployment scripts');
  }
};

// Function to create Clarinet configuration
const createClarinetConfig = () => {
  const clarinetConfig = {
    clarinet_version: "2.0.0",
    name: "pulse-robot-platform",
    description: "Decentralized NFT ticketing platform on Stacks",
    authors: ["Pulse Robot Team"],
    homepage: "https://pulse-robot.com",
    dependencies: [],
    contracts: {
      "sip-009-nft-trait": {
        path: "contracts/sip-009-nft-trait.clar",
        clarity_version: 2,
        epoch: "2.4"
      },
      "sip-010-trait": {
        path: "contracts/sip-010-trait.clar",
        clarity_version: 2,
        epoch: "2.4"
      },
      "sip-013-semi-fungible-token-trait": {
        path: "contracts/sip-013-semi-fungible-token-trait.clar",
        clarity_version: 2,
        epoch: "2.4"
      },
      "nft-ticket": {
        path: "contracts/nft-ticket.clar",
        clarity_version: 2,
        epoch: "2.4",
        depends_on: ["sip-009-nft-trait"]
      },
      "proof-of-fandom": {
        path: "contracts/proof-of-fandom.clar",
        clarity_version: 2,
        epoch: "2.4",
        depends_on: ["sip-013-semi-fungible-token-trait"]
      },
      "sbtc-payment": {
        path: "contracts/sbtc-payment.clar",
        clarity_version: 2,
        epoch: "2.4",
        depends_on: ["sip-010-trait"]
      },
      "governance": {
        path: "contracts/governance.clar",
        clarity_version: 2,
        epoch: "2.4"
      }
    },
    settings: {
      repl: {
        costs: true,
        parser_version: 2
      }
    }
  };

  fs.writeFileSync(
    path.join(__dirname, '..', 'Clarinet.toml'),
    Object.entries(clarinetConfig)
      .map(([key, value]) => {
        if (typeof value === 'object' && !Array.isArray(value)) {
          return `[${key}]\n${Object.entries(value)
            .map(([k, v]) => {
              if (typeof v === 'object') {
                return `[${key}.${k}]\n${Object.entries(v)
                  .map(([kk, vv]) => `${kk} = ${JSON.stringify(vv)}`)
                  .join('\n')}`;
              }
              return `${k} = ${JSON.stringify(v)}`;
            })
            .join('\n')}`;
        }
        return `${key} = ${JSON.stringify(value)}`;
      })
      .join('\n\n')
  );
  console.log('✅ Created Clarinet.toml configuration');
};

// Main setup function
const setupEnvironment = async () => {
  try {
    console.log('📋 Account Summary:');
    console.log('==================');

    for (const [name, account] of Object.entries(TEST_ACCOUNTS)) {
      console.log(`${name}:`);
      console.log(`  Address: ${account.address}`);
      console.log(`  Role: ${account.role}`);
      console.log(`  Private Key: ${account.privateKey.substring(0, 10)}...`);
      console.log('');
    }

    // Create configuration files
    console.log('📄 Creating configuration files...');
    createEnvFile();
    createTestDataFile();
    updatePackageScripts();
    createClarinetConfig();

    // Request testnet STX for all accounts
    console.log('💰 Requesting testnet STX for all accounts...');
    for (const [name, account] of Object.entries(TEST_ACCOUNTS)) {
      await requestTestnetSTX(account.address);
      await new Promise(resolve => setTimeout(resolve, 2000)); // Rate limiting
    }

    // Wait a bit for transactions to process
    console.log('\n⏳ Waiting 30 seconds for faucet transactions to process...');
    await new Promise(resolve => setTimeout(resolve, 30000));

    // Check balances
    console.log('💰 Checking account balances...');
    for (const [name, account] of Object.entries(TEST_ACCOUNTS)) {
      const balance = await checkBalance(account.address);
      console.log(`${name}: ${balance} STX`);
    }

    console.log('\n🎉 Environment setup completed!');
    console.log('===============================');
    console.log('✅ Test accounts created and funded');
    console.log('✅ Configuration files generated');
    console.log('✅ Environment variables set');
    console.log('✅ Package scripts updated');
    console.log('✅ Clarinet configuration created');

    console.log('\n🚀 Next steps:');
    console.log('==============');
    console.log('1. Review the generated .env file and update Turnkey credentials');
    console.log('2. Run `npm run deploy:testnet` to deploy contracts');
    console.log('3. Start your development server with `npm run dev`');
    console.log('4. Begin testing with the pre-funded accounts');

    console.log('\n📁 Generated files:');
    console.log('==================');
    console.log('• .env - Environment configuration');
    console.log('• test-data.json - Sample test data');
    console.log('• Clarinet.toml - Clarinet configuration');

  } catch (error) {
    console.error('❌ Setup failed:', error);
    process.exit(1);
  }
};

// Execute setup if run directly
if (require.main === module) {
  setupEnvironment()
    .then(() => process.exit(0))
    .catch((error) => {
      console.error('❌ Setup failed:', error);
      process.exit(1);
    });
}

module.exports = { setupEnvironment, TEST_ACCOUNTS };