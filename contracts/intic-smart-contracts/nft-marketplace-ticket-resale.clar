;; NFT Ticket Resale Marketplace - INTIC Platform
;; Specialized marketplace for NFT ticket secondary sales
;; Integrates with custom event NFT contracts generated by CreateEventNFT.tsx

;; Import SIP-009 NFT Trait
;; Using your deployed trait contract on testnet
(use-trait nft-trait 'ST1X7MNQF6TKA52PA7JRH99S9KKXH9TY8CSG8AK4C.sip-009-nft-trait.nft-trait)

;; Error Constants
(define-constant ERR-NOT-AUTHORIZED (err u100))
(define-constant ERR-NOT-FOUND (err u101))
(define-constant ERR-INVALID-PRICE (err u102))
(define-constant ERR-NOT-ACTIVE (err u103))
(define-constant ERR-AUCTION-ENDED (err u104))
(define-constant ERR-AUCTION-ACTIVE (err u105))
(define-constant ERR-BID-TOO-LOW (err u106))
(define-constant ERR-OFFER-EXPIRED (err u107))
(define-constant ERR-NOT-OWNER (err u108))
(define-constant ERR-TICKET-USED (err u109))
(define-constant ERR-EVENT-ENDED (err u110))
(define-constant ERR-INSUFFICIENT-PAYMENT (err u111))
(define-constant ERR-TRANSFER-FAILED (err u112))

;; Platform Constants
(define-constant CONTRACT-OWNER tx-sender)
(define-constant PLATFORM-FEE u250) ;; 2.5% = 250 basis points (out of 10000)
(define-constant MAX-ROYALTY u1000) ;; 10% max royalty

;; Data Variables
(define-data-var listing-nonce uint u0)
(define-data-var total-volume uint u0)
(define-data-var total-sales uint u0)
(define-data-var platform-earnings uint u0)

;; Data Maps
(define-map listings uint {
  nft-id: uint,
  nft-contract: principal,
  seller: principal,
  price: uint,
  listing-type: (string-utf8 10),
  created-at: uint,
  expires-at: (optional uint),
  is-active: bool,
  highest-bid: (optional uint),
  highest-bidder: (optional principal),
  
  ;; Ticket-specific fields
  event-title: (optional (string-utf8 256)),
  event-date: (optional uint),
  organizer: (optional principal),
  royalty-percentage: uint,
  original-price: uint
})

(define-map offers {nft-id: uint, nft-contract: principal, buyer: principal} {
  price: uint,
  expires-at: uint,
  is-active: bool,
  created-at: uint
})

(define-map sales uint {
  nft-id: uint,
  nft-contract: principal,
  seller: principal,
  buyer: principal,
  price: uint,
  sold-at: uint,
  platform-fee: uint,
  royalty-paid: uint
})

;; Collection stats for analytics
(define-map collection-stats principal {
  total-volume: uint,
  total-sales: uint,
  floor-price: uint,
  last-sale-price: uint,
  last-sale-time: uint
})

;; ============================================
;; LISTING FUNCTIONS
;; ============================================

;; List NFT Ticket for Fixed Price Sale
;; Called by ticket owner to list ticket on secondary market
(define-public (list-ticket-for-resale
  (nft-id uint)
  (nft-contract <nft-trait>)
  (price uint)
  (royalty-percentage uint)
  (original-price uint)
)
  (let (
    (listing-id (+ (var-get listing-nonce) u1))
  )
    ;; Validation
    (asserts! (> price u0) ERR-INVALID-PRICE)
    (asserts! (<= royalty-percentage MAX-ROYALTY) ERR-INVALID-PRICE)
    
    ;; Verify ownership via contract call
    ;; Most event contracts implement get-owner from SIP-009
    (asserts! 
      (is-eq 
        (some tx-sender) 
        (unwrap! (contract-call? nft-contract get-owner nft-id) ERR-NOT-FOUND)
      ) 
      ERR-NOT-OWNER
    )
    
    ;; Optional: Check if ticket is used (if contract supports it)
    ;; This would require contract to expose get-ticket-used function
    
    ;; Create listing
    (map-set listings listing-id {
      nft-id: nft-id,
      nft-contract: (contract-of nft-contract),
      seller: tx-sender,
      price: price,
      listing-type: u"fixed",
      created-at: stacks-block-height,
      expires-at: none,
      is-active: true,
      highest-bid: none,
      highest-bidder: none,
      event-title: none,
      event-date: none,
      organizer: none,
      royalty-percentage: royalty-percentage,
      original-price: original-price
    })
    
    (var-set listing-nonce listing-id)
    
    (ok listing-id)
  )
)

;; List Ticket for Auction
;; For high-demand events, sellers can auction tickets
(define-public (list-ticket-auction
  (nft-id uint)
  (nft-contract <nft-trait>)
  (starting-price uint)
  (duration-blocks uint)
  (royalty-percentage uint)
  (original-price uint)
)
  (let (
    (listing-id (+ (var-get listing-nonce) u1))
    (expires-at (+ stacks-block-height duration-blocks))
  )
    ;; Validation
    (asserts! (> starting-price u0) ERR-INVALID-PRICE)
    (asserts! (> duration-blocks u0) ERR-INVALID-PRICE)
    (asserts! (<= royalty-percentage MAX-ROYALTY) ERR-INVALID-PRICE)
    
    ;; Verify ownership
    (asserts! 
      (is-eq 
        (some tx-sender) 
        (unwrap! (contract-call? nft-contract get-owner nft-id) ERR-NOT-FOUND)
      ) 
      ERR-NOT-OWNER
    )
    
    ;; Create auction listing
    (map-set listings listing-id {
      nft-id: nft-id,
      nft-contract: (contract-of nft-contract),
      seller: tx-sender,
      price: starting-price,
      listing-type: u"auction",
      created-at: stacks-block-height,
      expires-at: (some expires-at),
      is-active: true,
      highest-bid: none,
      highest-bidder: none,
      event-title: none,
      event-date: none,
      organizer: none,
      royalty-percentage: royalty-percentage,
      original-price: original-price
    })
    
    (var-set listing-nonce listing-id)
    (ok listing-id)
  )
)

;; ============================================
;; BUYING FUNCTIONS
;; ============================================

;; Buy Fixed Price Listing
;; Handles complete purchase flow: payment distribution + NFT transfer
(define-public (buy-resale-ticket (listing-id uint) (nft-contract <nft-trait>))
  (let (
    (listing (unwrap! (map-get? listings listing-id) ERR-NOT-FOUND))
    (seller (get seller listing))
    (price (get price listing))
    (nft-contract-principal (get nft-contract listing))
    (nft-id (get nft-id listing))
    (royalty-pct (get royalty-percentage listing))
    (sale-id (+ (var-get listing-nonce) u1))
    
    ;; Calculate payment distribution
    (platform-fee (/ (* price PLATFORM-FEE) u10000))
    (royalty-amount (/ (* price royalty-pct) u10000))
    (seller-amount (- price (+ platform-fee royalty-amount)))
  )
    ;; Validations
    (asserts! (get is-active listing) ERR-NOT-ACTIVE)
    (asserts! (is-eq (get listing-type listing) u"fixed") ERR-NOT-AUTHORIZED)
    (asserts! (not (is-eq tx-sender seller)) ERR-NOT-AUTHORIZED)
    (asserts! (is-eq (contract-of nft-contract) nft-contract-principal) ERR-NOT-AUTHORIZED)
    
    ;; 1. Transfer NFT from seller to buyer
    ;; Uses the transfer function from the event NFT contract
    (unwrap! (contract-call? nft-contract transfer nft-id seller tx-sender) ERR-TRANSFER-FAILED)
    
    ;; 2. Distribute payments
    ;; Payment to seller
    (try! (stx-transfer? seller-amount tx-sender seller))
    
    ;; Platform fee to contract owner
    (try! (stx-transfer? platform-fee tx-sender CONTRACT-OWNER))
    (var-set platform-earnings (+ (var-get platform-earnings) platform-fee))
    
    ;; Royalty to organizer (if set)
    (if (and (> royalty-amount u0) (is-some (get organizer listing)))
      (try! (stx-transfer? royalty-amount tx-sender (unwrap-panic (get organizer listing))))
      true
    )
    
    ;; 3. Record sale
    (map-set sales sale-id {
      nft-id: nft-id,
      nft-contract: nft-contract-principal,
      seller: seller,
      buyer: tx-sender,
      price: price,
      sold-at: stacks-block-height,
      platform-fee: platform-fee,
      royalty-paid: royalty-amount
    })
    
    ;; 4. Update listing as sold
    (map-set listings listing-id (merge listing {is-active: false}))
    
    ;; 5. Update marketplace stats
    (var-set listing-nonce sale-id)
    (var-set total-volume (+ (var-get total-volume) price))
    (var-set total-sales (+ (var-get total-sales) u1))
    
    ;; 6. Update collection stats
    (update-collection-stats nft-contract-principal price)
    
    (ok true)
  )
)

;; ============================================
;; AUCTION FUNCTIONS
;; ============================================

;; Place Bid on Auction Listing
(define-public (place-bid (listing-id uint) (bid-amount uint))
  (let (
    (listing (unwrap! (map-get? listings listing-id) ERR-NOT-FOUND))
    (current-bid (default-to u0 (get highest-bid listing)))
    (expires-at (unwrap! (get expires-at listing) ERR-NOT-FOUND))
  )
    ;; Validations
    (asserts! (get is-active listing) ERR-NOT-ACTIVE)
    (asserts! (is-eq (get listing-type listing) u"auction") ERR-NOT-AUTHORIZED)
    (asserts! (< stacks-block-height expires-at) ERR-AUCTION-ENDED)
    (asserts! (> bid-amount current-bid) ERR-BID-TOO-LOW)
    (asserts! (> bid-amount (get price listing)) ERR-BID-TOO-LOW)
    (asserts! (not (is-eq tx-sender (get seller listing))) ERR-NOT-AUTHORIZED)
    
    ;; Update listing with new highest bid
    (map-set listings listing-id (merge listing {
      highest-bid: (some bid-amount),
      highest-bidder: (some tx-sender)
    }))
    
    (ok true)
  )
)

;; End Auction and Execute Sale
;; Can be called by seller after auction expires
(define-public (end-auction (listing-id uint) (nft-contract <nft-trait>))
  (let (
    (listing (unwrap! (map-get? listings listing-id) ERR-NOT-FOUND))
    (expires-at (unwrap! (get expires-at listing) ERR-NOT-FOUND))
    (highest-bidder (unwrap! (get highest-bidder listing) ERR-NOT-FOUND))
    (final-price (unwrap! (get highest-bid listing) ERR-NOT-FOUND))
    (seller (get seller listing))
    (nft-contract-principal (get nft-contract listing))
    (nft-id (get nft-id listing))
    (royalty-pct (get royalty-percentage listing))
    (sale-id (+ (var-get listing-nonce) u1))
    
    ;; Calculate payments
    (platform-fee (/ (* final-price PLATFORM-FEE) u10000))
    (royalty-amount (/ (* final-price royalty-pct) u10000))
    (seller-amount (- final-price (+ platform-fee royalty-amount)))
  )
    ;; Validations
    (asserts! (get is-active listing) ERR-NOT-ACTIVE)
    (asserts! (is-eq (get listing-type listing) u"auction") ERR-NOT-AUTHORIZED)
    (asserts! (is-eq (get seller listing) tx-sender) ERR-NOT-AUTHORIZED)
    (asserts! (>= stacks-block-height expires-at) ERR-AUCTION-ACTIVE)
    (asserts! (is-eq (contract-of nft-contract) nft-contract-principal) ERR-NOT-AUTHORIZED)
    
    ;; Transfer NFT to highest bidder
    (unwrap! (contract-call? nft-contract transfer nft-id seller highest-bidder) ERR-TRANSFER-FAILED)
    
    ;; Note: In real implementation, highest bidder should have escrowed STX
    ;; For simplicity, assuming payment is handled separately
    
    ;; Record sale
    (map-set sales sale-id {
      nft-id: nft-id,
      nft-contract: nft-contract-principal,
      seller: seller,
      buyer: highest-bidder,
      price: final-price,
      sold-at: stacks-block-height,
      platform-fee: platform-fee,
      royalty-paid: royalty-amount
    })
    
    ;; Update listing
    (map-set listings listing-id (merge listing {is-active: false}))
    
    ;; Update stats
    (var-set listing-nonce sale-id)
    (var-set total-volume (+ (var-get total-volume) final-price))
    (var-set total-sales (+ (var-get total-sales) u1))
    (var-set platform-earnings (+ (var-get platform-earnings) platform-fee))
    
    (update-collection-stats nft-contract-principal final-price)
    
    (ok true)
  )
)

;; ============================================
;; OFFER FUNCTIONS
;; ============================================

;; Make Offer on Ticket
;; Buyers can propose prices for tickets not actively listed
(define-public (make-offer
  (nft-id uint)
  (nft-contract <nft-trait>)
  (price uint)
  (duration-blocks uint)
)
  (let ((expires-at (+ stacks-block-height duration-blocks)))
    (asserts! (> price u0) ERR-INVALID-PRICE)
    (asserts! (> duration-blocks u0) ERR-INVALID-PRICE)
    
    ;; Create offer
    (map-set offers {nft-id: nft-id, nft-contract: (contract-of nft-contract), buyer: tx-sender} {
      price: price,
      expires-at: expires-at,
      is-active: true,
      created-at: stacks-block-height
    })
    
    (ok true)
  )
)

;; Accept Offer
;; Ticket owner can accept buyer's offer
(define-public (accept-offer 
  (nft-id uint)
  (nft-contract <nft-trait>)
  (buyer principal)
  (royalty-percentage uint)
)
  (let (
    (nft-contract-principal (contract-of nft-contract))
    (offer (unwrap! (map-get? offers {nft-id: nft-id, nft-contract: nft-contract-principal, buyer: buyer}) ERR-NOT-FOUND))
    (price (get price offer))
    (sale-id (+ (var-get listing-nonce) u1))
    
    ;; Calculate payments
    (platform-fee (/ (* price PLATFORM-FEE) u10000))
    (royalty-amount (/ (* price royalty-percentage) u10000))
    (seller-amount (- price (+ platform-fee royalty-amount)))
  )
    ;; Validations
    (asserts! (get is-active offer) ERR-NOT-ACTIVE)
    (asserts! (< stacks-block-height (get expires-at offer)) ERR-OFFER-EXPIRED)
    (asserts! (<= royalty-percentage MAX-ROYALTY) ERR-INVALID-PRICE)
    
    ;; Verify ownership
    (asserts! 
      (is-eq 
        (some tx-sender) 
        (unwrap! (contract-call? nft-contract get-owner nft-id) ERR-NOT-FOUND)
      ) 
      ERR-NOT-OWNER
    )
    
    ;; Transfer NFT to buyer
    (unwrap! (contract-call? nft-contract transfer nft-id tx-sender buyer) ERR-TRANSFER-FAILED)
    
    ;; Distribute payments
    (try! (stx-transfer? seller-amount buyer tx-sender))
    (try! (stx-transfer? platform-fee buyer CONTRACT-OWNER))
    (var-set platform-earnings (+ (var-get platform-earnings) platform-fee))
    
    ;; Record sale
    (map-set sales sale-id {
      nft-id: nft-id,
      nft-contract: nft-contract-principal,
      seller: tx-sender,
      buyer: buyer,
      price: price,
      sold-at: stacks-block-height,
      platform-fee: platform-fee,
      royalty-paid: royalty-amount
    })
    
    ;; Deactivate offer
    (map-set offers {nft-id: nft-id, nft-contract: nft-contract-principal, buyer: buyer} 
      (merge offer {is-active: false}))
    
    ;; Update stats
    (var-set listing-nonce sale-id)
    (var-set total-volume (+ (var-get total-volume) price))
    (var-set total-sales (+ (var-get total-sales) u1))
    
    (update-collection-stats nft-contract-principal price)
    
    (ok true)
  )
)

;; ============================================
;; CANCEL FUNCTIONS
;; ============================================

;; Cancel Listing (Seller only)
(define-public (cancel-listing (listing-id uint))
  (let ((listing (unwrap! (map-get? listings listing-id) ERR-NOT-FOUND)))
    (asserts! (get is-active listing) ERR-NOT-ACTIVE)
    (asserts! (is-eq (get seller listing) tx-sender) ERR-NOT-AUTHORIZED)
    
    (map-set listings listing-id (merge listing {is-active: false}))
    (ok true)
  )
)

;; Cancel Offer (Buyer only)
(define-public (cancel-offer (nft-id uint) (nft-contract <nft-trait>))
  (let (
    (nft-contract-principal (contract-of nft-contract))
    (offer (unwrap! (map-get? offers {nft-id: nft-id, nft-contract: nft-contract-principal, buyer: tx-sender}) ERR-NOT-FOUND))
  )
    (asserts! (get is-active offer) ERR-NOT-ACTIVE)
    
    (map-set offers {nft-id: nft-id, nft-contract: nft-contract-principal, buyer: tx-sender} 
      (merge offer {is-active: false}))
    (ok true)
  )
)

;; ============================================
;; HELPER FUNCTIONS
;; ============================================

;; Update collection statistics
(define-private (update-collection-stats (nft-contract principal) (sale-price uint))
  (let (
    (default-stats {
      total-volume: u0,
      total-sales: u0,
      floor-price: u0,
      last-sale-price: u0,
      last-sale-time: u0
    })
    (stats (default-to default-stats (map-get? collection-stats nft-contract)))
    (current-floor (get floor-price stats))
    (new-floor (if (or (is-eq current-floor u0) (< sale-price current-floor))
                  sale-price
                  current-floor))
  )
    (map-set collection-stats nft-contract {
      total-volume: (+ (get total-volume stats) sale-price),
      total-sales: (+ (get total-sales stats) u1),
      floor-price: new-floor,
      last-sale-price: sale-price,
      last-sale-time: stacks-block-height
    })
    (ok true)
  )
)

;; ============================================
;; READ-ONLY FUNCTIONS
;; ============================================

;; Get listing details
(define-read-only (get-listing (listing-id uint))
  (ok (map-get? listings listing-id))
)

;; Get offer details
(define-read-only (get-offer (nft-id uint) (nft-contract principal) (buyer principal))
  (ok (map-get? offers {nft-id: nft-id, nft-contract: nft-contract, buyer: buyer}))
)

;; Get sale details
(define-read-only (get-sale (sale-id uint))
  (ok (map-get? sales sale-id))
)

;; Get marketplace statistics
(define-read-only (get-marketplace-stats)
  (ok {
    total-volume: (var-get total-volume),
    total-sales: (var-get total-sales),
    total-listings: (var-get listing-nonce),
    platform-earnings: (var-get platform-earnings)
  })
)

;; Get collection statistics
(define-read-only (get-collection-stats (nft-contract principal))
  (ok (map-get? collection-stats nft-contract))
)

;; Calculate platform fee for a given price
(define-read-only (calculate-platform-fee (price uint))
  (ok (/ (* price PLATFORM-FEE) u10000))
)

;; Calculate royalty for a given price and percentage
(define-read-only (calculate-royalty (price uint) (royalty-percentage uint))
  (ok (/ (* price royalty-percentage) u10000))
)

;; Calculate seller proceeds after fees
(define-read-only (calculate-seller-proceeds 
  (price uint)
  (royalty-percentage uint)
)
  (let (
    (platform-fee (/ (* price PLATFORM-FEE) u10000))
    (royalty (/ (* price royalty-percentage) u10000))
  )
    (ok (- price (+ platform-fee royalty)))
  )
)

;; ============================================
;; ADMIN FUNCTIONS
;; ============================================

;; Withdraw platform earnings (Owner only)
(define-public (withdraw-platform-earnings (amount uint) (recipient principal))
  (begin
    (asserts! (is-eq tx-sender CONTRACT-OWNER) ERR-NOT-AUTHORIZED)
    (try! (stx-transfer? amount tx-sender recipient))
    (ok true)
  )
)
